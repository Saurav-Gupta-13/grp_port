
type Register @aws_iam @aws_api_key {
  id: ID!
  firstName: String
  lastName: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelRegisterConnection @aws_api_key @aws_iam {
  items: [Register]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelRegisterFilterInput {
  id: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  and: [ModelRegisterFilterInput]
  or: [ModelRegisterFilterInput]
  not: ModelRegisterFilterInput
}

type Query {
  getRegister(id: ID!): Register @aws_api_key @aws_iam
  listRegisters(filter: ModelRegisterFilterInput, limit: Int, nextToken: String): ModelRegisterConnection @aws_api_key @aws_iam
  syncRegisters(filter: ModelRegisterFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelRegisterConnection @aws_api_key @aws_iam
}

input ModelRegisterConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  and: [ModelRegisterConditionInput]
  or: [ModelRegisterConditionInput]
  not: ModelRegisterConditionInput
}

input CreateRegisterInput {
  id: ID
  firstName: String
  lastName: String
  _version: Int
}

input UpdateRegisterInput {
  id: ID!
  firstName: String
  lastName: String
  _version: Int
}

input DeleteRegisterInput {
  id: ID!
  _version: Int
}

type Mutation {
  createRegister(input: CreateRegisterInput!, condition: ModelRegisterConditionInput): Register @aws_api_key @aws_iam
  updateRegister(input: UpdateRegisterInput!, condition: ModelRegisterConditionInput): Register @aws_api_key @aws_iam
  deleteRegister(input: DeleteRegisterInput!, condition: ModelRegisterConditionInput): Register @aws_api_key @aws_iam
}

input ModelSubscriptionRegisterFilterInput {
  id: ModelSubscriptionIDInput
  firstName: ModelSubscriptionStringInput
  lastName: ModelSubscriptionStringInput
  and: [ModelSubscriptionRegisterFilterInput]
  or: [ModelSubscriptionRegisterFilterInput]
}

type Subscription {
  onCreateRegister(filter: ModelSubscriptionRegisterFilterInput): Register @aws_subscribe(mutations: ["createRegister"]) @aws_api_key @aws_iam
  onUpdateRegister(filter: ModelSubscriptionRegisterFilterInput): Register @aws_subscribe(mutations: ["updateRegister"]) @aws_api_key @aws_iam
  onDeleteRegister(filter: ModelSubscriptionRegisterFilterInput): Register @aws_subscribe(mutations: ["deleteRegister"]) @aws_api_key @aws_iam
}

